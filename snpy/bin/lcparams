#!/usr/bin/env python

import pymysql
from numpy import *
import sys, string, re

def rdarg(argv,key,conv=None,default=None,single=0):
   val = default
   if key in argv:
      if not single:
         val=argv[argv.index(key)+1]
         del argv[argv.index(key):argv.index(key)+2]
         if conv: val=map(conv,[val])[0]
      else:
         del argv[argv.index(key):argv.index(key)+1]
         val = 1
         if default == 1: val=0
   else:
      if conv and val: val=apply(conv,(val,))
   return argv,val

allfilters = ['B','V','u','g','r','i','Y','J','H']
allparams = ['name','filter','dm15','Tmax','Mmax']
eparams = ['dm15','Tmax','Mmax']
fparams = {'name':'%10s',
           'filter':'%7s',
           'dm15':'%6.2f',
           'Tmax':'%10.1f',
           'Mmax':'%7.3f'}
lparams = {'name':'%10s',
           'filter':'%7s',
           'dm15':'%6s',
           'Tmax':'%10s',
           'Mmax':'%7s'}

argv = sys.argv[1:]
argv,snexpr = rdarg(argv, '-sn', None, '.*')
argv,filters = rdarg(argv, '-filters', None, allfilters)
argv,params = rdarg(argv, '-params', None, allparams)
argv,condition = rdarg(argv, '-cond', None, None)
argv,method = rdarg(argv, '-method', None, 'spline')
argv,obsframe = rdarg(argv, '-obsframe', None, 0, single=1)
argv,redden = rdarg(argv, '-redden', None, 0, single=1)

try:
   pat = re.compile(r''+str(snexpr))
except:
   print "Sorry, your regular expression is invalid"
   sys.exit(1)

if method not in ['spline','dm15-template','st-template']:
   print "Sorry, method must be one of 'spline','dm15-template','st-template'"
   sys.exit(1)

if type(filters) is type(""):
   filters = string.split(filters, ',')

if type(params) is type(""):
   params = string.split(params, ',')
   for param in params:
      if param not in allparams:
         print "Sorry, %s is not a valid parameter" % param
         sys.exit(1)

if 'name' not in params:  params.append('name')
if 'filter' not in params:  params.append('filter')

# Construct parameter list
qparams = []
format = []
title = ""
for par in params:
   qparams.append(par)
   format.append(fparams[par])
   if par == 'dm15' and method == 'st-template':
      title += lparams[par] % ('st')
      title += " "
   else:
      title += lparams[par] % (par)
      title += " "
   if par in eparams:
      qparams.append('e_'+par)
      format.append(fparams[par])
      title += lparams[par] % ("+/-")

qparams.append('A_lambda')
qparams.append('K')
query = 'SELECT %s from lcparams where method="%s"' % (','.join(qparams),method)
if condition:
   query += "AND %s" % (query)

d = pymysql.connect(host='kepler.obs.carnegiescience.edu', user='CSP', passwd='H!=75', db='SN')
c = d.cursor()
c.execute(query)

data = c.fetchall()

print title
print '-'*len(title)
for i in range(len(data)):
   name = data[i][qparams.index('name')]
   if not pat.search(name):  continue
   f = data[i][qparams.index('filter')]
   if f not in filters:  continue
   for j in range(len(data[i])-2):
      if qparams[j] == 'Mmax':
         Mmax = data[i][j]
         if obsframe:
            Mmax -= data[i][-1]
         if redden:
            Mmax += data[i][-2]
         print format[j] % Mmax,
      else:
         print format[j] % data[i][j],
   print


